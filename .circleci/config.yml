version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7}

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here     
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: '#udacity'
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                	  "type": "mrkdwn",
                    "text": "*Job Failed!* :red_circle:\n>*Job:* $CIRCLE_JOB \n>*Link:* $CIRCLE_BUILD_URL \n\n>*Project:* $CIRCLE_PROJECT_REPONAME \n>*Branch:* $CIRCLE_BRANCH \n>*Author:* $CIRCLE_USERNAME"
                  }
                }
              ]
            }

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name back-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name front-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt

            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            curl -H "Content-Type: text/plain" -H "token: 440bb73b-b904-44f1-ab72-71ade8f9b9e1" --request PUT --data ${BACKEND_IP} https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP

            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["81:79:32:77:70:22:b5:84:ee:80:05:52:e2:44:48:d8"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            MIGRATIONS_OUTPUT=$(npm run migrations)
      - run:
          name: Send migration results to memstash
          command: |
            echo ${MIGRATIONS_OUTPUT}
            if grep -q "has been executed successfully" ${MIGRATIONS_OUTPUT}; then
              curl -H "Content-Type: text/plain" -H "token: f7800e0b-ceae-4840-8b0f-5a84e3420fbc" --request PUT --data "success" https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus
            else
              curl -H "Content-Type: text/plain" -H "token: f7800e0b-ceae-4840-8b0f-5a84e3420fbc" --request PUT --data "failure" https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Set env variables
          command: |
            BACKEND_IP=$(curl -H "Content-Type: text/plain" -H "token: 440bb73b-b904-44f1-ab72-71ade8f9b9e1" --request GET https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  deploy-backend:
    docker:
      - image: cimg/python:3.10.0-node
        user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["81:79:32:77:70:22:b5:84:ee:80:05:52:e2:44:48:d8"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
      - run:
          name: build backend zip file
          command: |
            cd /root/project/backend
            npm i

            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            npm run build
            npm run prestart:prod

            tar -zcvf api.tar.gz dist/

            mv api.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: add ansible config
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
      - run:
          name: Deploy backend
          command: |
            echo $(curl -H "token: 440bb73b-b904-44f1-ab72-71ade8f9b9e1" --request GET https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP) >> .circleci/ansible/inventory.txt
            echo "------------------------------------"
            cat .circleci/ansible/inventory.txt
            echo "------------------------------------"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "Content-Type: text/plain" -H "token: 440bb73b-b904-44f1-ab72-71ade8f9b9e1" --request GET https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
            then
              echo "Backend Smoke Test Success"
              exit 0
            else
              echo "Backend Smoke Test Failed"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"
              return 1
            fi
      - destroy-environment

  # cloudfront-update:
  #   docker:
      # Docker image here that supports AWS CLI
    # steps:
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
      # Docker image here
    # steps:
      # Checkout code from git
      # - run:
      #     name: Get old stack workflow id
      #     command: |
      #       # your code here
      #       export OldWorkflowID="the id here"
      #       export STACKS=[] #put the list of stacks here
      # - run:
      #     name: Remove old stacks and files
      #     command: |
      #       if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #       then
      #         # your code here
      #       fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]